#!perl

=head1 NAME

  Network managment

=cut

use strict;
use warnings FATAL => 'all';
use POSIX qw(strftime);
use Abills::Base qw(in_array mk_unique_value load_pmodule2 date_format _bp);
use Abills::Filters qw(_mac_former dec2hex);
require Abills::Misc;
use Data::Dumper;
use Nms::db::Nms;

our ($html,
  %lang,
  $admin,
  %conf,
  $db,
);

our $Nms = Nms->new( $db, $admin, \%conf );

load_pmodule2('SNMP');

SNMP::addMibDirs( '../../var/snmp/mibs' );
SNMP::addMibDirs( '../../var/snmp/mibs/private' );
SNMP::initMib();

my %snmpparms;
$snmpparms{Version} = 2;
$snmpparms{UseEnums} = 1;
$snmpparms{Retries} = 1;
$snmpparms{UseSprintValue} = 1;
$snmpparms{Timeout} = 2000000;
$snmpparms{Community} = $conf{NMS_COMMUNITY_RO};

require Nms::util::CableTest;
require Nms::util::NmsTraps;

#**********************************************************

=head2 nms_obj()

=cut

#**********************************************************
sub nms_obj {
  
  my ($attr) = @_;
  
  $LIST_PARAMS{SORT} = $FORM{sort} || 1;
  if ($FORM{del}){
    $Nms->obj_del($FORM{del})
  }
  if ($FORM{SAVE}){
    $Nms->obj_add({
      ID           => $FORM{OBJ_ID},
      RW_COMMUNITY => $FORM{Rw_COMMUNITY},
      RO_COMMUNITY => $FORM{RO_COMMUNITY},
      STATUS       => $FORM{STATUS},
    })
  }
  
  my $oid_hash = $Nms->sysobjectid_list({LABEL => '_SHOW', LIST2HASH  => 'objectid,label'});
  my $so_index = get_function_index('sysobjectid_table');
  my $nms = $Nms->obj_list({
    IP           => $FORM{IP} || '_SHOW',
    NAS_NAME     => '_SHOW',
    SYS_NAME     => '_SHOW',
    SYS_LOCATION => '_SHOW',
    SYS_OBJECTID => '_SHOW',
    STATUS       => $attr->{STATUS} || $FORM{STATUS} || '_SHOW',
    RO_COMMUNITY => '_SHOW',
    RW_COMMUNITY => '_SHOW',
    NAS_ID       => '_SHOW',
    ID           => $FORM{ID} || $FORM{chg} || '_SHOW',
    PAGE_ROWS    => 1000000,
    COLS_NAME    => 1,
    %LIST_PARAMS,
  });
  if ( $FORM{chg} ) {
  	my $STATUS = $html->form_select(
      'STATUS',
      	{
        		SELECTED  => $nms->[0]->{status}|| '',
            SEL_HASH     => {
              0  => $lang{ENABLED},
              1  => $lang{DISABLED}
            },
            NO_ID        => 1,
            SORT_KEY_NUM => 1
      	}
      );
    print $html->form_main({
          	CONTENT =>  label_w_txt('IP', $nms->[0]->{ip}).
                        label_w_txt($lang{NAME}, $nms->[0]->{sysname}).
                        label_w_txt('SYS_LOCATION', $nms->[0]->{syslocation}).
                        label_w_txt('SYS_OBJECTID', $html->element('a', $oid_hash->{$nms->[0]->{sysobjectid}},
                        { href => "index.cgi?index=" . $so_index . "&SYSOBJECTID=" . $nms->[0]->{sysobjectid} })).
                        label_w_txt('RO_COMMUNITY', $nms->[0]->{ro_community}, {INP=>1}).
                        label_w_txt('RW_COMMUNITY', $nms->[0]->{rw_community}, {INP=>1}).
                        label_w_txt($lang{STATUS}, $STATUS).
                        label_w_txt(undef, $html->form_input( 'SAVE', $lang{CHANGE}, {
                            TYPE => 'SUBMIT'
                          }) . "	" .
      											$html->button($lang{CANCEL}, "index=$index$pages_qs", {class =>"btn btn-default"}),
      								  {RCOL => 3}),
      	    METHOD  => 'GET',
          	HIDDEN  => {
            				'index'    => $index,
            				'OBJ_ID'   => $FORM{chg} || '',
          				},
            class => 'form-horizontal'
        	});
    return 1;
  }

  if ($FORM{ID} || $FORM{IP}) {
    my $obj_id = $FORM{ID} || $nms->[0]->{id};
    $pages_qs .= "&ID=$obj_id";
    my @header_arr = ("$lang{MAIN}:index=$index&visual=INFO$pages_qs");
    my $heads = $Nms->oids_list({
      OBJECTID  => $nms->[0]->{sysobjectid},
      LABEL     => '_SHOW',
      SECTION   => '_SHOW',
      TYPE      => 'table',
      COLS_NAME => 1,
      GROUP     => 'section'
    });
    foreach my $val (@$heads){
      push @header_arr, "$val->{section}:index=$index&visual=$val->{section}$pages_qs";
    };
 #   if ( $Equipment->graph_list({ OBJ_ID => $obj_id }) ) {
      push @header_arr, "$lang{STATS}:index=$index&visual=STATS$pages_qs";
 #   }
    push @header_arr, "MIBs Browser:index=$index&visual=MIB_BR$pages_qs";
    
    my $buttons = $html->table_header( \@header_arr, { TABS => 1 } );
    if ($buttons) {
      my $obj_select = $html->form_select(
         'ID',
         {
           SELECTED => $attr->{ID} || $obj_id,
           SEL_LIST => $Nms->obj_list(
             {
               IP  => '_SHOW',
               SYS_LOCATION => '_SHOW',
               COLS_NAME => 1,
               SORT      => 1,
               PAGE_ROWS => 10000,
             }
           ),
           SEL_KEY        => 'id',
           SEL_VALUE      => 'ip,syslocation',
           NO_ID          => 1,
           MAIN_MENU      => $index,
           MAIN_MENU_ARGV => "chg=" . ($obj_id || '')
         }
       );

      my $obj_select_form = $html->form_main(
         {
           CONTENT => $obj_select,
           HIDDEN  => {
             'index'  => $index,
             'visual' => $FORM{visual} || 0,
           },
           NAME  => 'nms_obj_panel',
           ID    => 'nms_obj_panel',
           class => 'navbar-form navbar-right',
         }
      );

      print $html->element('div', $obj_select_form . $buttons, { class => 'navbar navbar-default' });
    }

    my $visual = $FORM{visual} || 'INFO';
    if ($visual eq 'INFO') {
      nms_obj_data({ ID => $obj_id });
    } 
    elsif ($visual eq 'STATS') {
      nms_snmp_stats({ ID => $obj_id });
    } 
    elsif ($visual eq 'MIB_BR') {
      mibs_browser({ ID => $obj_id });
    } 
    else {
      oid_table({ ID => $obj_id, SECT => $visual, OBJECTID  => $nms->[0]->{sysobjectid} });
    }
  }
  elsif ($Nms->{TOTAL} != 0) {
    my @status_bar = (
      "$lang{ALL}:index=$index",
      "$lang{ENABLED}:index=$index&STATUS=0",
      "$lang{DISABLED}:index=$index&STATUS=1",
    );
    my ($table) = result_former({
      INPUT_DATA      => $Nms,
      LIST            => $nms,
      BASE_FIELDS     => 1,
      DEFAULT_FIELDS  => 'IP, NAS_NAME, SYS_NAME, SYS_LOCATION, SYS_OBJECTID, STATUS',
      HIDDEN_FIELDS   => 'NAS_ID,ID,RO_COMMUNITY,RW_COMMUNITY',
      FUNCTION_FIELDS => 'change,del',
      EXT_TITLES      => {
        ip       => 'IP',
        name     => "$lang{NAME} NAS",
      },
      FILTER_COLS  => {
        ip          => "search_link:nms_obj:,ID",
        name        => "search_link:form_nas:,NAS_ID",
        sysobjectid => "search_link:sysobjectid_table:,SYSOBJECTID",
      },
      SELECT_VALUE    => { sysobjectid => \%$oid_hash },
      TABLE => {
        caption    => ($attr->{MONIT})? $html->color_mark($lang{DISABLED},'#FF0000') : "$lang{LIST} - $lang{EQUIPMENT}",
        qs         => $pages_qs,
        ID         => 'OBJ_LIST',
        header     => (!$attr->{MONIT})? $html->table_header(\@status_bar):undef,
        DATA_TABLE => {
          lengthMenu => [[28, 52, -1],[28, 52, $lang{ALL}]],
          ordering   => undef,
          searching  => ($attr->{MONIT})? undef : 'true',
          paging     => ($attr->{MONIT})? undef : 'true'
        }
      },
      MAKE_ROWS       => 1,
      SKIP_USER_TITLE => 1,
      SKIP_PAGES      => 1,
      TOTAL           => ($attr->{MONIT})? 0 : 1,
      OUTPUT2RETURN   => 1
    });
    return $table->show() if $attr->{MONIT};
    print $table;
  }
  return 1;
}

#**********************************************************

=head2 nms_obj_data()

=cut

#**********************************************************
sub nms_obj_data {

  my ($attr) = @_;

  my $prm = load_mibs({ ID => $attr->{ID}});
  my $info = $Nms->oids_list(
    {
      COLS_NAME => 1,
      OBJECTID  => $prm->{sysobjectid},
      TYPE      => 'scalar',
      LABEL     => '_SHOW',
      IID       => '_SHOW',
    }
  );
  if ( $FORM{OID} && $FORM{VAL} ) {
    $snmpparms{Community} = $conf{NMS_COMMUNITY_RW};
    my $sess = SNMP::Session->new(DestHost => $prm->{ip}, %snmpparms);
    #my $value = $SNMP::MIB{$mib}{enums}{action} || 1;
    my $vb = SNMP::Varbind->new([$FORM{OID},$FORM{IID}||0,$FORM{VAL}]);
    $sess->set($vb);
    if ( $sess->{ErrorNum} ) {
      return $html->message('err', $lang{ERROR}, $sess->{ErrorStr});
    }
  }
  my @vars;
  foreach my $b (@$info) {
    push @vars, [$b->{label},$b->{iid} || 0]
  }
  $snmpparms{UseSprintValue} = 1;
  $snmpparms{Community} = $attr->{COMMUNITY} || $conf{NMS_COMMUNITY_RO};
  my $sess = SNMP::Session->new(DestHost => $prm->{ip}, %snmpparms);

  my $vl = SNMP::VarList->new(@vars);
  my @result = $sess->get($vl);
  if ( $sess->{ErrorNum} ) {
    return $html->message('err', $lang{ERROR}, $sess->{ErrorStr});
  }

  my $table = $html->table(
    {
      #caption     => "$lang{LAST_UPDATE}: $info->[0]->{info_time}",
      width       => '100%',
      title_plain => [ $lang{PARAMS}, $lang{VALUE} ],
      cols_align  => [ 'left', 'left' ],
      ID          => 'EQUIPMENT_INFO',
    }
  );

  foreach my $val (@vars) {
  my $edit = ($SNMP::MIB{$val->[0]}{'access'} && $SNMP::MIB{$val->[0]}{'access'} eq 'ReadWrite')?
    $html->button( $lang{CHANGE}, undef,{
      JAVASCRIPT     => '',
      SKIP_HREF      => 1,
      NO_LINK_FORMER => 1,
      class          => "change",
      title          => $lang{ADD},
      ex_params      => qq/onclick=\"turnTextIntoInputField('$val->[0]','$val->[2]')\"/
    }) :'';
  $table->addrow($html->b($val->[0]), $val->[2], $edit);
  }
  print qq(
    <script>
      function turnTextIntoInputField(inputOID,value) {
        var val = prompt(inputOID, value);
        if (val != value) {
          document.location = 'index.cgi?index=$index$pages_qs&visual=INFO&OID=' + inputOID + '&VAL=' + val;
        }
      }
    </script>
  );
  print $table->show();

  return 1;
}

#**********************************************************

=head2 oid_table()

=cut

#**********************************************************
sub oid_table {

  my ($attr) = @_;

  my $info = $Nms->obj_list({
    COLS_NAME    => 1,
    ID           => $FORM{ID}||$attr->{ID},
    IP           => '_SHOW',
    SYS_OBJECTID => '_SHOW',
    }
  );

  my $prm = load_mibs({ ID => $attr->{ID}});
  my $tbl = $Nms->oids_list(
    {
      COLS_NAME => 1,
      SECTION   => $FORM{SECT}||$attr->{SECT},
      OBJECTID  => $prm->{sysobjectid},
      TYPE      => 'table',
      LABEL     => '_SHOW',
    }
  );
 
  my @tab_cont;
  my @header_arr;

  foreach my $t (@$tbl) {
    my $rows = $Nms->oids_rows_list({ ID => $t->{id} });
    my @vars;
    foreach my $row (@$rows) {
      push @vars, $row->[1];
    }

    push @tab_cont, $html->element('div', nms_snmp_table({
      SECT => $attr->{SECT},
      OID => $t->{label},
      columns => [ @vars ],
      IP => $info->[0]->{ip}
    }), { id => $t->{label}, class => "tab-pane fade" . (( @tab_cont < 1 )?'in active':'') });
    push @header_arr, "$t->{label}:#$t->{label}:data-toggle='tab'"; 
  }

  my $buttons = $html->table_header( \@header_arr, { TABS => 1 } );
  my $edit = $html->button($lang{EDIT}, "index=$index&edit=1", { ICON => 'fa fa-pencil-square-o', });
  my $tab = $html->element('div', "@tab_cont", { class => 'tab-content' });

  print $buttons . $tab;

  return 1;
}

#**********************************************************

=head2 nms_snmp_set()

=cut

#**********************************************************
sub nms_snmp_set {

  my ($attr) = @_;
  $snmpparms{UseSprintValue} = 1;
  $snmpparms{Community} = $attr->{COMMUNITY} || $conf{NMS_COMMUNITY_RW};
  my $sess = SNMP::Session->new(DestHost => $FORM{IP} || $attr->{IP}, %snmpparms);
  my $result = $sess->set([ $FORM{OID} || $attr->{OID}, $FORM{IID} || $attr->{IID} || 0 ]);
  if ( $sess->{ErrorNum} ) {
    return $html->message('err', $lang{ERROR}, $sess->{ErrorStr});
  }
  my $result_tbl = $html->table({});
  $result_tbl->addrow($html->b($lang{RESULT}), $result);
  #print $result_tbl->show();
  print $attr->{OID};
 
  return 1;
}

#**********************************************************

=head2 nms_snmp_table()

=cut

#**********************************************************
sub nms_snmp_table {

  my ($attr) = @_;
  $snmpparms{UseSprintValue} = 1;
#  $snmpparms{Timeout} = 10000000;
  $snmpparms{Community} = $attr->{COMMUNITY} || $conf{NMS_COMMUNITY_RO};
  my $sess = SNMP::Session->new(DestHost => $attr->{IP},%snmpparms);
  my @columns;
  if (!$attr->{columns}){
      foreach my $c (sort { $a <=> $b } @{$SNMP::MIB{$attr->{OID}}{children}[0]{children}}) {
      push @columns, {data => $c->{label}};
      push @{$attr->{columns}}, $c->{label}
      }
  }
  else {
    foreach my $c ( @{$attr->{columns}} ){
      push @columns, { data => $c };
    }
  }
  my $results = $sess->gettable( $attr->{OID}, columns => [@{$attr->{columns}}], noindexes => 1 );
  my @sorted_vals;
  foreach my $key (sort { ($a =~ /^\d+$/ &&  $b =~ /^\d+$/) ? $a <=> $b : $a cmp $b } keys %$results){
    foreach my $ind ( @{$attr->{columns}} ){
      if ( ($SNMP::MIB{$ind}{syntax} eq 'PortList') && $results->{$key}->{$ind} ){
        $results->{$key}->{$ind} =~ s/"|\n//g;
        my @in_hex = split(/ /, $results->{$key}->{$ind});
        my $ind_ex='';
        foreach my $hex (@in_hex){
          $ind_ex .= sprintf( "%08b", hex($hex));
        }
        $results->{$key}->{$ind} = '';
        my $offset = 0;
        my $result = index($ind_ex, 1, $offset);
        while ($result != - 1) {
          $result = index($ind_ex, 1, $offset);
          $offset = $result + 1;
          $results->{$key}->{$ind} .= "$offset " if ( $offset > 0 );
        }
      }
      if ( $SNMP::MIB{$ind}{syntax} eq 'MacAddress' && $results->{$key}->{$ind}){
        $results->{$key}->{$ind} = _mac_former($results->{$key}->{$ind});
      }
    }
    push @sorted_vals, $results->{$key}
  }
  
  if ( $sess->{ErrorNum} ) {
    return $html->message('err', $lang{ERROR}, $sess->{ErrorStr});
  }

  my $table =  $html->table({
    ID          => $attr->{OID},
    title_plain => \@{$attr->{columns}},
    DATA_TABLE => {
      data    => \@sorted_vals,
      columns => \@columns,
      lengthMenu => [[10, 28, 52, -1],[10, 28, 52, $lang{ALL}]],
    }
  });
  return $table->show()
 }

#**********************************************************

=head2 nms_show()

=cut

#**********************************************************
sub nms_show {
  my ($attr) = @_;
  $snmpparms{UseSprintValue} = 1;
  my $table = $html->table();
  $table->addrow($html->b($lang{NAME}), $SNMP::MIB{$attr->{OID}}{label});
  $table->addrow($html->b('objectID'), $SNMP::MIB{$attr->{OID}}{objectID});
  $table->addrow($html->b($lang{TYPE}), $SNMP::MIB{$attr->{OID}}{type}) if $SNMP::MIB{$attr->{OID}}{type};
  $table->addrow($html->b('Module'), $SNMP::MIB{$attr->{OID}}{moduleID});
  $table->addrow($html->b($lang{ACCESS}), $SNMP::MIB{$attr->{OID}}{access});
  $table->addrow($html->b('Syntax'), $SNMP::MIB{$attr->{OID}}{syntax}) if $SNMP::MIB{$attr->{OID}}{syntax};
  $table->addrow($html->b($lang{RANGE}), "$SNMP::MIB{$attr->{OID}}{ranges}[0]{low} .. $SNMP::MIB{$attr->{OID}}{ranges}[0]{high}") 
      if $SNMP::MIB{$attr->{OID}}{ranges}[0];
  $table->addrow($html->b($lang{DESCRIBE}), $SNMP::MIB{$attr->{OID}}{TCDescription}) if $SNMP::MIB{$attr->{OID}}{TCDescription};
  $table->addrow($html->b('Reference'), $SNMP::MIB{$attr->{OID}}{reference}) if $SNMP::MIB{$attr->{OID}}{reference};
  $table->addrow($html->b('Index(es)'), "@{$SNMP::MIB{$attr->{OID}}{indexes}}") if $SNMP::MIB{$attr->{OID}}{indexes}[0];
  $table->addrow($html->b('Value List'), oid_enums($attr->{OID},{STR=>1})) if keys %{$SNMP::MIB{$attr->{OID}}{enums}};
  if ($attr->{EDIT} == 0){
    my $type = ($SNMP::MIB{$attr->{OID}}{children}[0]{indexes}[0])? 'table' : 'scalar';
    my $button = $html->button( $lang{ADD}, undef, {
      JAVASCRIPT     => '',
      SKIP_HREF      => 1,
      NO_LINK_FORMER => 1,
      class          => "btn btn-default",
      title          => $lang{ADD},
      ex_params      => qq/onclick=addLink('$attr->{OID}','$type') /
    });
    $table->addrow($button, '');
  }
   
  return $table->show();
}
#**********************************************************

=head2 mibs_browser()

=cut

#**********************************************************
sub mibs_browser {

  my ($attr) = @_;

  my $obj;
  my $root_index = get_function_index('mibs_browser');
  my $mods_index = get_function_index('modules_table');
  my $ID = $attr->{ID} || $FORM{ID} || $FORM{GET} || $FORM{WALK} || $FORM{TABLE} || $FORM{SHOW} || 0 ;
  $pages_qs = $pages_qs . "&ID=$ID";
  
  if ($FORM{OID}){
    $obj = load_mibs({ OBJECTID => $FORM{OBJECTID}, ID => $ID });
    print nms_show({ OID => $FORM{OID}, EDIT => $ID });
    if ($FORM{GET}){
      $snmpparms{UseSprintValue} = 1;
      my $sess = SNMP::Session->new(DestHost => $obj->{ip}, %snmpparms);
      my $iid = $attr->{IID} || 0;
      my $result = $sess->get([ $FORM{OID}, $iid ]);
      if ( $sess->{ErrorNum} ) {
        return $html->message('err', $lang{ERROR}, $sess->{ErrorStr});
      }
      my $result_tbl = $html->table({});
      $result_tbl->addrow($html->b($lang{RESULT}), $result);
      print $result_tbl->show();
    } 
    elsif ($FORM{WALK}){
      my $sess = SNMP::Session->new(DestHost => $obj->{ip}, %snmpparms);
      my @result = $sess->bulkwalk(0, 1,[ $FORM{OID} ]);
      if ( $sess->{ErrorNum} ) {
        return $html->message('err', $lang{ERROR}, $sess->{ErrorStr});
      }
      my $result_tbl = $html->table({});
      foreach my $val (@{$result[0]}) {
        my $edit = $html->button( $lang{CHANGE}, "index=$index$pages_qs&OID=$FORM{OID}",
             { MESSAGE => "$lang{CHANGE} $SNMP::MIB{$FORM{OID}}{label}",
               TEXT    => $lang{CHANGE},
               class   => 'change'
             });
        $result_tbl->addrow(@$val, ($SNMP::MIB{$FORM{OID}}{access} eq 'ReadWrite')? $edit :'')
      }
      print $result_tbl->show();
    } 
    elsif ($FORM{TABLE}){
      print nms_snmp_table({ IP => $obj->{ip}, OID => $FORM{OID}});
    } 
    elsif ($FORM{SET}){
      nms_snmp_set({ IP => $obj->{ip}, OID => $FORM{OID}});
    }
    return 1;
  }

  $obj = load_mibs({ OBJECTID => $FORM{OBJECTID}, ID => $ID });
  my $OBJECTID = $FORM{OBJECTID} || $obj->{sysobjectid};

  my $res = $html->element('div', '',
                { 
                id => 'RESULT',
                class => 'col-md-9 text-left',
                style => 'overflow-y:scroll;overflow-x:scroll;height:75vh;outline: 1px solid silver'
              });

  my $mod_btn = $html->button($lang{MODULES}, "index=$mods_index&OBJECTID=$OBJECTID", {class =>"btn btn-primary btn-sm"});
  my $search = $html->element('input', '', { 
    class => 'search-input form-control input-sm',
    placeholder => 'press Enter for search'
  });
  my $funct_div = $html->element('div', $search ."   ". $mod_btn, { class => 'form-inline' } );
  my $tree = $html->element('div', $funct_div . mibs_tree(),
                  { 
                  class => 'col-md-3',
                  style => 'overflow-y: scroll;height:75vh;outline: 1px solid silver'
                });
  my $scr = qq(
   <script>
    var id = '$ID';

    function renewLeftBox(itemName,Action,id,iid){
    iid = iid ? iid : 0 ;
    var url = 'index.cgi?qindex=$root_index&OBJECTID=$OBJECTID&header=2&OID=' + itemName + '&IID=' + iid + '&' + Action + '=' + id;
      jQuery('#RESULT').load(url);
    };
    jQuery('#MY_TREE').on("changed.jstree", function (e, data) {
        renewLeftBox(data.instance.get_node(data.selected[0]).text,'SHOW', id)
    });
    jQuery(".search-input").keypress(function(e) {
      if (e.which == 13) {
        var searchString = jQuery(this).val();
        console.log(searchString);
        jQuery('#MY_TREE').jstree('search', searchString);
      }
    });
  	jQuery.jstree.defaults.contextmenu.items = { };
    jQuery('#MY_TREE').on('contextmenu', '.jstree-anchor', function (e) {
  	});
  </script>); 

  print $tree.$res.$scr;
  return 1;
}

#**********************************************************

=head2 nms_snmp_stats()

=cut

#**********************************************************
sub nms_snmp_stats {
  
  my ($attr) = @_;
  use Time::Local;
  load_pmodule2('Redis');

  my $redis = Redis->new(
          server => $conf{REDIS_SERV},
          encoding => undef,
  );

  my $stats = $Nms->triggers_list({
      COLS_NAME => 1,
      OBJ_ID    => $attr->{ID},
      LABEL     => '_SHOW',
      IID       => '_SHOW',
      MONIT     => '_SHOW',
      SYS_NAME  => '_SHOW',
    });
  return 1 if !$stats;

  my $to_date = time;
  my $from_date = time-21600;
  if ($FORM{TO_DATE}){
    my ($year,$mon,$mday,$hour,$min) = split(/[\s\-:]+/, $FORM{TO_DATE});
    $to_date = timelocal(0,$min,$hour,$mday,$mon-1,$year);
  }
  if ($FORM{TO_DATE}){
    my ($year,$mon,$mday,$hour,$min) = split(/[\s\-:]+/, $FORM{FROM_DATE});
    $from_date = timelocal(0,$min,$hour,$mday,$mon-1,$year);
  }
  
  my %ind;
  my %params;
  foreach my $key ( @$stats ) {
    my @list = $redis->zrangebyscore("$key->{id}", $from_date, $to_date, 'WITHSCORES' );
    foreach my $val ( 0..@list-2 ) {
      if ( $val%2 == 1 ){
        my $value = sprintf("%.2f", ($list[$val+1] - $list[$val-1]) / ($list[$val+2] - $list[$val]) / 1048576 * 8);
        push  @{$ind{$key->{iid}}}, ({ $key->{label} => $value, y => strftime("%Y-%m-%d %T", localtime($list[$val])) });
      }
    }
    push  @{$params{$key->{iid}}}, $key->{label};
  };

  my $PORT_SEL = $html->form_select(
    'PORT',
    {
      SELECTED  => $FORM{PORT},
      SEL_ARRAY => \@{ [ sort { $a <=> $b } keys %ind ] },
      NO_ID     => 1
    }
  );

  if (!$attr->{MONIT}){
    print $html->form_main(
      {
        CONTENT => "$lang{PERIOD}: $lang{FROM} &nbsp" . $html->form_datetimepicker2('FROM_DATE') .
      "&nbsp $lang{TO} &nbsp" . $html->form_datetimepicker2('TO_DATE') .
      "&nbsp $lang{PORT}: " . $PORT_SEL . $html->form_input('SHOW', $lang{SHOW}, { TYPE => 'SUBMIT' }),
        METHOD  => 'GET',
        class   => 'form-inline',
        HIDDEN  => {
          index  => "$index",
          visual => 'STATS',
          ID => $attr->{ID} || $FORM{ID},
        },
      }
    );    
  }

  my $chart;
  foreach my $in (sort { $a <=> $b } keys %ind) {
    $chart .= $html->make_charts3("$stats->[0]->{sysname}: $lang{PORT} $in", 'Line', {
      data      => \@{$ind{$in}},
      ykeys     => \@{$params{$in}},
      xkey     => 'y',
      labels    => \@{$params{$in}},
      element   => $in,
      postUnits => 'Mb/s',
      hideHover => 'auto',
      resize    => 'true'
    });
  }
  return $chart if $attr->{MONIT};
  print $chart;
  return 1
}

#**********************************************************
=head2 label_w_txt($label,$text,$attr); - return formated text with label

  Arguments:
    $label - text of label
    $text 
    $attr -
      CTRL - for form with input control
      COLOR - color of label
      ID - 
      TYPE -
      LCOL
      RCOL
      
  Returns:
    String with element

=cut
#**********************************************************
sub label_w_txt {
	my ($label,$text,$attr) = @_;
	my $class = ($attr->{COLOR}) ? "label-$attr->{COLOR}" : '' ;
  $class = ($attr->{ICON})? ' has-feedback' : '' ;
  my $flabel =  $html->element(($attr->{INP})? 'span' : 'label', $label, {
    class => 'control-label col-sm-' . ($attr->{LCOL}||'2'),
    for => $attr->{ID} || $label
  });
  my $ftext =  $html->element(($attr->{INP})?'input':'p', $text, {
    class => ($attr->{INP})?'form-control':'form-control-static',
    id => $attr->{ID} || $label,
    name => $attr->{ID} || $label,
    type => $attr->{TYPE} || undef,
    value => $attr->{VAL} || undef,
    placeholder => ($attr->{HOLDER})? $attr->{HOLDER} : undef
  });
  $ftext .= $html->element('span', undef,
    {
      id    => $attr->{ID} || $label,
      class => $attr->{ICON} . ' form-control-feedback'
    }) if $attr->{ICON};
  $ftext = $html->element('div', $ftext, { class => 'col-sm-' . ($attr->{RCOL}||'3') . $class });
	
	return $html->element('div', $flabel.$ftext, { class => 'form-group' . $class });
}
#**********************************************************

=head2 sysobjectid_table()

=cut

#**********************************************************
sub sysobjectid_table {

  my ($attr) = @_;

    $LIST_PARAMS{OBJECTID} = $FORM{SYSOBJECTID};
#    $LIST_PARAMS{GROUP} = 'module';
    result_former({
      INPUT_DATA      => $Nms,
      FUNCTION        => 'sysobjectid_list',
    #  DEFAULT_FIELDS  => 'SYSORID, MODULE, STATUS',
      DEFAULT_FIELDS  => 'LABEL, OBJECTID',
      FUNCTION_FIELDS => 'modules_table:modules:objectid,oids_set:oids:objectid',
      SKIP_USER_TITLE => 1,
      FILTER_COLS  => {
#        ip   => "search_link:nms_obj:,ID",
      },
#     SELECT_VALUE    => { sysObjectID => \%ohash },
      TABLE => {
        caption => " ",
        qs      => ($FORM{SYSOBJECTID})? "$pages_qs&SYSOBJECTID=$FORM{SYSOBJECTID}" : $pages_qs,
        ID      => 'SYSOBJECTID_LIST',
      },
      MAKE_ROWS => 1,
      TOTAL     => 1
    });

  return 1;
}
#**********************************************************

=head2 modules_table()

=cut

#**********************************************************
sub modules_table {
  my ($attr) = @_;

  $LIST_PARAMS{OBJECTID} = $FORM{OBJECTID};
  $pages_qs = "$pages_qs&OBJECTID=$FORM{OBJECTID}";
  if ($FORM{del}){
    $Nms->module_del($FORM{del});
  }
  if ($FORM{SAVE}){
    $Nms->module_add({
      ID        => $FORM{ID}||'',
      MODULE    => $FORM{NAME},
      OBJECTID  => $FORM{OBJECTID},
      DESCR     => $FORM{DESCR},
      STATUS    => $FORM{STATUS} || 0
    } );
  }
  my $modules = $Nms->modules_list({ 
    ID        => $FORM{chg},
    MODULE    => '_SHOW',
    DESCR     => '_SHOW',
    STATUS    => '_SHOW',
    COLS_NAME => 1,
    %LIST_PARAMS,
  });
  if ($FORM{chg} || $FORM{add}){
    SNMP::addMibFiles(glob("../../var/snmp/mibs/private" . '/*'));
    my %mod;
    foreach my $oid (keys(%SNMP::MIB)) {
       $mod{$SNMP::MIB{$oid}{moduleID}} = '' if $SNMP::MIB{$oid}{moduleID}
    }
    my @mods = sort keys %mod;
  	my $NAME_SEL = $html->form_select(
      'NAME',
      	{
        		SELECTED  => $modules->[0]->{module}|| '',
        		SEL_ARRAY  => \@mods,
      	}
      );
    print $html->form_main({
          	CONTENT =>  label_w_txt($lang{DESCRIBE}, $modules->[0]->{descr}).
                        label_w_txt($lang{NAME}, $NAME_SEL).
                        label_w_txt($lang{STATUS}, $html->form_input('STATUS', 1, {
                            TYPE => 'checkbox',
                            STATE => $modules->[0]->{status}||undef
                          })
                          ).
                        label_w_txt(undef, $html->form_input( 'SAVE', ( $FORM{chg} )? $lang{CHANGE} : $lang{CREATE}, {
                            TYPE => 'SUBMIT'
                          }) . "	" .
      											$html->button($lang{CANCEL}, "index=$index$pages_qs", {class =>"btn btn-default"}),
      								  {RCOL => 3}),
      	    METHOD  => 'GET',
          	HIDDEN  => {
            				'index'    => $index,
            				'ID'       => $FORM{chg} || '',
                    'OBJECTID' => $FORM{OBJECTID},
                    'DESCR'    => $modules->[0]->{descr}
          				},
        	});
  }
  else{
    result_former({
      INPUT_DATA      => $Nms,
      LIST            => $modules,
      DEFAULT_FIELDS  => 'MODULE, DESCR, STATUS',
      HIDDEN_FIELDS   => 'OBJECTID',
      FUNCTION_FIELDS => 'change, del',
      SKIP_USER_TITLE => 1,
      STATUS_VALS     => [$lang{DISABLED}, $html->color_mark($lang{ACTIV}, 'text-success')],
      TABLE => {
        caption => "SNMP Modules",
        qs      => $pages_qs,
        ID      => 'MODULES_LIST',
        MENU    => "$lang{ADD}:index=$index$pages_qs&add=1:add",
      },
      MAKE_ROWS => 1,
      TOTAL     => 1
    });
  }

  return 1;
}

#**********************************************************
=head2 load_mibs($attr); - return formated text with label

=cut
#**********************************************************
sub load_mibs {
  my ($attr) = @_;
  if ($attr->{ALL}){
    SNMP::addMibFiles(glob('../../var/snmp/mibs/private' . '/*'));
  }
  else {
    my $nms;
    if ($attr->{ID}){
      $nms = $Nms->obj_list({
        COLS_NAME    => 1,
        ID           => $attr->{ID},
        IP           => '_SHOW',
        SYS_OBJECTID => '_SHOW',
        }
      );
    }
  
    my @mods;
    my $sys_mods = $Nms->modules_list({
      OBJECTID => $attr->{OBJECTID} || $nms->[0]->{sysobjectid},
      MODULE   => '_SHOW',
      STATUS   => 1
    });
    foreach my $val (@$sys_mods) {
      push @mods, $val->[0];
    }
    SNMP::loadModules(@mods);
  
    return $nms->[0] if $attr->{ID};
  }
  return 1;
}

#**********************************************************

=head2 oid_enums()

=cut

#**********************************************************
sub oid_enums {
  my ($oid, $attr) = @_;
  my %enums;
  my $str = '';
  foreach my $el ( keys %{$SNMP::MIB{$oid}{enums}} ) {
    $enums{$SNMP::MIB{$oid}{enums}{$el}} = $el;
  }
  if ($attr){
    foreach my $key ( sort keys %enums ) {
      $str .= "$key = $enums{$key} </br>"
    }
    return $str;
  };

  return %enums;
}

#**********************************************************

=head2 mibs_tree()

=cut

#**********************************************************
sub mibs_tree {

  my ($attr) = @_;

  my %labels;
  my @tree_arr;
  foreach my $oid (sort keys(%SNMP::MIB)) {
    if ( $attr->{LABEL} || $attr->{SYNTAX} ) {
      if ( $attr->{SYNTAX} ) {
        $labels{$SNMP::MIB{$oid}{label}} = $SNMP::MIB{$oid}{objectID} if  $SNMP::MIB{$oid}{syntax} eq $attr->{SYNTAX}
      }
      else {
        foreach my $val ( @{$attr->{LABEL}} ) {
          $labels{$SNMP::MIB{$oid}{label}} = $SNMP::MIB{$oid}{objectID} if  $SNMP::MIB{$oid}{label} =~ /$val/
        }
      }
    }
    elsif ( $attr->{HASH} ) {
      $labels{substr($SNMP::MIB{$oid}{objectID},1)} = $SNMP::MIB{$oid}{label}
    }
    else {
      my $prev_id = ($SNMP::MIB{$oid}{parent})? $SNMP::MIB{$oid}{parent}{objectID} : '#' ;
      my $icon = '';
      my %type;
      if ( $SNMP::MIB{$oid}{children}[0]{indexes}[0] ){
        $type{type} = 'table';
      } 
      elsif ( $SNMP::MIB{$oid}{parent} && $SNMP::MIB{$oid}{parent}{indexes}[0]){
        $type{type} = 'row';
      } 
      elsif ( $SNMP::MIB{$oid}{type}){
        $type{type} = 'scalar';
      }
      push @tree_arr, ({
        id   => $SNMP::MIB{$oid}{objectID},
        text => $SNMP::MIB{$oid}{label},
        parent => $prev_id,
        %type
      });
    }
  }
  return \%labels if $attr->{LABEL} || $attr->{HASH} || $attr->{SYNTAX};
  return make_tree( @tree_arr );
}

#**********************************************************
=head2 make_tree($attr) - Make different charts

   If given only one series and X_TEXT as YYYY-MM, will build columned compare chart

   Arguments:
     $attr
       DATA    - Data array of hashes
   Result:
     TRUE or FALSE

=cut
#**********************************************************
sub make_tree {
  my (@data) = @_;
  my $result = '';
  my $TREE_ID = 'MY_TREE';
  my $DATA  = JSON->new->encode(\@data);
  
  $result.= qq{
    <link rel='stylesheet' href='/styles/lte_adm/plugins/jstree/themes/proton/style.min.css' />
    <script type='text/javascript' src='/styles/lte_adm/plugins/jstree/jstree.min.js'></script>
    <div id=$TREE_ID></div>
  };
  $result.= qq(
    <script>
      jQuery('#$TREE_ID').jstree({
    		'core' : {
          'themes': {
            'name': 'proton',
            'responsive': true
          },
          'data' : $DATA
        },
        'plugins' : [ 'contextmenu', 'types', 'search' ],
        'search': {
          'case_insensitive': true,
          'show_only_matches' : false
        },
        'contextmenu' : {
          'items' : customMenu
        },
        'types' : {
          'table' : {
                'icon' : 'glyphicon glyphicon-list-alt'
              },
          'row' : {
                'icon' : 'glyphicon glyphicon-option-horizontal'
              },
          'scalar' : {
                'icon' : 'glyphicon glyphicon-file'
              }
        }
    	});
      function customMenu(node) {
          var items = {
              Get: {
                  label: 'Get',
                  icon : 'glyphicon glyphicon-download',
                  action: function () {
                    renewLeftBox(node.text,'GET',id);
                  }
              },
              Table: { 
                  label: 'Table',
                  icon : 'glyphicon glyphicon-list-alt',
                  action: function () {
                    renewLeftBox(node.text,'TABLE',id);
                  }
              },
              Walk: { 
                  label: 'Walk',
                  icon : 'glyphicon glyphicon-circle-arrow-down',
                  action: function () {
                    renewLeftBox(node.text,'WALK',id);
                  }
              }
          };

          if (node.type === 'scalar') {
            delete items.Table;
            delete items.Walk;            
          }
          else if (node.type === 'row') {
            delete items.Get;
            delete items.Table;
          }
          else if (node.type === 'table') {
            delete items.Get;
          }
          else {
            delete items.Table;
            delete items.Walk;
            delete items.Get;
          }

          return items;
      }
	  </script>
   );

  return $result;
}

#**********************************************************

=head2 nms_monitor()

=cut

#**********************************************************
sub nms_monitor {
  my ($attr) = @_;
  my $traps_pg_rows = $FORM{FILTER} || 10;
  my $page = nms_obj({ STATUS => 1, MONIT => 1 });
  if ($page eq '1') {
    $page = nms_snmp_stats({ MONIT => 1 });
  }
  $page .= nms_traps({ PAGE_ROWS => 10, MONIT => 1 });

  my $scr = qq(
    <script type="text/javascript">
      var url = 'index.cgi?get_index=nms_monitor&header=2&REFRESH=1';
      var ref_timer = '';
      var timerId = '';
      function loadNowPlaying(){
        jQuery("#MONIT").load(url);
      }
      jQuery("input[name=toggle]").change(function(){
       if(jQuery(this).is(':checked')){
         ref_timer = (jQuery("#timer").val() >= 10 ) ? jQuery("#timer").val() : 60;
       //  alert(ref_timer);
         timerId = setInterval(function(){loadNowPlaying()}, ref_timer*1000);
       }
       else{
         clearInterval(timerId);
       }
      });
    </script>
  );
  my $refr = $html->element('label', $html->element('input', undef, {
        type => 'checkbox',
        name => 'toggle'
      }) . 'Refresh', { class=>'checkbox-inline' }) ;
  $refr .= $html->element('label', $html->element('input', undef, {
        type => 'number',
        min  => '10',
        id   => 'timer',
        placeholder => '60'
      }) . ' seconds', { class=>'checkbox-inline' }) ;
  print $html->element('div', $page, { ID => 'MONIT'} );
  print $refr . $scr if (!$FORM{REFRESH});

  return 1;
}

#**********************************************************

=head2 oids_set()

=cut

#**********************************************************
sub oids_set {
  my ($attr) = @_;

  load_mibs({ OBJECTID => $FORM{OBJECTID} });
  if ( $FORM{SAVE} ) {
    $Nms->obj_oids_add({SECTION=>'write',LABEL=>$FORM{WRITE_OID}}) if $FORM{WRITE_OID};
    $Nms->obj_oids_add({SECTION=>'reboot',LABEL=>$FORM{REBOOT_OID}}) if $FORM{REBOOT_OID};
  }
  my $heads = $Nms->oids_list({
    OBJECTID  => $FORM{OBJECTID},
    LABEL     => '_SHOW',
    SECTION   => '_SHOW',
    TYPE      => '_SHOW',
    LIST2HASH => 'type,section'
  });
  if ( $FORM{ID}) {
    return oid_table_row_edit({ OID_ID => $FORM{ID}, OBJECTID => $FORM{OBJECTID} });
  }
  elsif ( $FORM{OID} ) {
    my $sect = $SNMP::MIB{$FORM{OID}}{parent}{label};
    my $id_num = $Nms->obj_oids_add({
      LABEL    => $FORM{OID},
      SECTION  => $sect,
      TYPE     => $FORM{visual} || '',
      OBJECTID => $FORM{OBJECTID},
    });
    print $id_num->{INSERT_ID};
    return $id_num->{INSERT_ID};
  }
  my @header_arr = (
    "$lang{MAIN}:index=$index&visual=INFO&OBJECTID=$FORM{OBJECTID}$pages_qs",
    "TABLE:index=$index&visual=TABLE&OBJECTID=$FORM{OBJECTID}$pages_qs",
    "SCALAR:index=$index&visual=SCALAR&OBJECTID=$FORM{OBJECTID}$pages_qs"
  );
#  foreach my $val (sort keys %$heads){
#    push @header_arr, uc($val).":index=$index&OBJECTID=$FORM{OBJECTID}&visual=$val$pages_qs";
#  };
  my $buttons = $html->table_header( \@header_arr, { TABS => 1 } );
  print $html->element('div', $buttons, { class => 'navbar navbar-default' });
  my $visual = $FORM{visual} || 'INFO';
  if ($visual eq 'INFO') {
    print $html->form_main({
      CONTENT => label_w_txt('WRITE_OID', $heads->{reboot} || '', { INP => 1, ICON => 'null'}) .
                 label_w_txt('REBOOT_OID', $heads->{write} || '', { INP => 1, ICON => 'null'}) .
                 label_w_txt(undef, $html->form_input( 'SAVE', $lang{SAVE}, {TYPE => 'SUBMIT'})),
      METHOD  => 'GET',
    	HIDDEN  => {
      				'index'    => $index,
      				'OBJECTID'   => $FORM{OBJECTID} || '',
    				},
      class => 'form-horizontal'
  	});
    print qq(
      <script>
        jQuery('input.form-control').keyup(function() {
          var myClass = jQuery(this).next('span').attr("class");
          if(myClass == "null form-control-feedback")
            jQuery(this).next('span').removeClass().toggleClass('glyphicon glyphicon-floppy-disk form-control-feedback');
        });
      </script>
    );
  }
  elsif ($FORM{visual}) {
    oids_edit({ TYPE => $visual, OBJECTID  => $FORM{OBJECTID} });
  }
  return 1;
}

#**********************************************************

=head2 oid_edit()

=cut

#**********************************************************
sub oids_edit {

  my ($attr) = @_;

  if ( $FORM{del} ) {
    $Nms->oid_del($FORM{del});
  }

  if ( $FORM{add}  || $FORM{ID} ) {
    print mibs_browser({EDIT => 1});
    print qq(
      <script>
        function addLink(oid,type){
          var link = '?get_index=oids_set&header=2&OBJECTID=$attr->{OBJECTID}';
          if ( type === 'table'){
            jQuery.get(link + '&OID=' + oid + '&visual=' + type, function(data){
              loadRawToModal(link + '&ID=' + data);
            });
          }
          else {
            jQuery.get(link + '&OID=' + oid + '&visual=' + type);
          }
        };
      </script>
      );
    return 1;
  }
  else {
    $LIST_PARAMS{OBJECTID} = $attr->{OBJECTID};
    $LIST_PARAMS{TYPE} = $attr->{TYPE};
    result_former({
      INPUT_DATA      => $Nms,
      FUNCTION        => 'oids_list',
      DEFAULT_FIELDS  => 'SECTION,LABEL,IID,TYPE,ACCESS',
      FUNCTION_FIELDS => ($FORM{visual} eq 'table')? ":change:id;objectid,del" : 'del',
      HIDDEN_FIELDS   => 'ID,OBJECTID',
      EXT_TITLES      => {
        type     => "$lang{TYPE}",
       },
      SKIP_USER_TITLE => 1,
      TABLE           => {
       qs   => "$pages_qs&OBJECTID=$attr->{OBJECTID}&visual=$attr->{TYPE}",
       ID   => 'OID_LIST',
       MENU => "$lang{ADD}:index=$index$pages_qs&OBJECTID=$attr->{OBJECTID}&visual=$attr->{TYPE}&add=1:add",
      },
      MAKE_ROWS => 1,
      TOTAL     => 1
    });
  }
  return 1;
}

#**********************************************************

=head2 oid_table_row_edit()

=cut

#**********************************************************
sub oid_table_row_edit {

  my ($attr) = @_;

  if ( $FORM{OID_DEL} ) {
    $Nms->oid_row_del({ 
      LABEL  => $FORM{OID_DEL},
      OID_ID => $attr->{OID_ID}
    });
    return 1
  }
  if ( $FORM{ADD} ) {
    $Nms->oid_row_add({
      ID => $attr->{OID_ID},
      LABEL  => $FORM{ADD},
    });
  } 

  my $oid = $Nms->oids_list({
    COLS_NAME  => 1,
    ID         => $attr->{OID_ID},
    SECTION    => '_SHOW',
    OBJECTID   => $attr->{OBJECTID},
    LABEL      => '_SHOW',
    IID        => '_SHOW',
    TYPE       => '_SHOW',
    ACCESS     => '_SHOW'
  });
  $oid = $oid->[0];

  my $rows = $Nms->oids_rows_list({
    COLS_NAME  => 0,
    ID         => $attr->{OID_ID},
    LABEL      => '_SHOW',
    OBJECTID   => '_SHOW',
    LIST2HASH  => 'label, objectid'
  });

  my @colls;
  foreach my $coll (@{$SNMP::MIB{$oid->{label}}{children}[0]{children}}) {
    my $state = ( exists $rows->{$coll->{label}} ) ? 1 : undef ;
    push @colls, label_w_txt( $coll->{label}, $html->form_input($coll->{label}, $state, { TYPE => 'checkbox', STATE => $state }) .
    "  " . $html->element('span', '', { class => '' }), {CTRL => 1} );
  }
	print $html->element('div', $html->element('h4', $oid->{label}, { class => 'modal-title' }),
    { class => 'modal-header' });
  my $btn = $html->element('button', ($FORM{IN_MODAL})? $lang{CLOSE}: $lang{BACK}, {
    class => 'btn btn-default',
    'data-dismiss' => 'modal',
    type=>'button',
    onclick => (!$FORM{IN_MODAL})? 'goBack()':''
   });
  print $html->element('div', $html->element('form',"@colls" . $btn , { class => 'form-horizontal' }), { class => 'modal-body' });
  
  my $scr = qq(
         <script>
         jQuery(':checkbox').change(function(){
             var link = '?get_index=oids_set&header=2&OBJECTID=$attr->{OBJECTID}';
             if(jQuery(this).prop('checked')) {
               jQuery.get(link + '&ID=$attr->{OID_ID}' + '&ADD=' + jQuery(this).prop('id'), function(data){
                 //alert(data);
               });
             }
             else {
               jQuery.get(link + '&ID=$attr->{OID_ID}' + '&OID_DEL=' + jQuery(this).prop('id'), function(data){
                 //alert(data);
               });
             }
         });
         function goBack() {
             window.history.back();
         }
         </script>
         );
  print $scr;
  return 1;
}


1;