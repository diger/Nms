#!perl

=head1 NAME

  Network managment

=cut

use strict;
use warnings FATAL => 'all';
use POSIX qw(strftime);
use Abills::Base qw(in_array mk_unique_value load_pmodule2 date_format _bp);
use Abills::Filters qw(_mac_former dec2hex);
require Abills::Misc;
use Equipment;
use Data::Dumper;
use Nms::db::Nms;

our ($html,
  %lang,
  $admin,
  %conf,
  $db,
);

our $Equipment = Equipment->new( $db, $admin, \%conf );
our $Nms = Nms->new( $db, $admin, \%conf );
require Nms::util::CableTest;

load_pmodule2('SNMP');

SNMP::addMibDirs( '../../var/snmp/mibs' );
SNMP::addMibDirs( '../../var/snmp/mibs/private' );
SNMP::initMib();

my %snmpparms;
$snmpparms{Version} = 2;
$snmpparms{UseEnums} = 1;
$snmpparms{Retries} = 1;
$snmpparms{UseSprintValue} = 1;
$snmpparms{Timeout} = 2000000;



#**********************************************************

=head2 equipment_stats_edit()

=cut

#**********************************************************
sub equipment_stats_edit {
 my ($attr) = @_;
 
 $pages_qs .= ($FORM{NAS_ID} && $FORM{PORT}) ? "&NAS_ID=$FORM{NAS_ID}&PORT=$FORM{PORT}" : q{};
 my $root_index = get_function_index('equipment_panel_new') . "&NAS_ID=$FORM{NAS_ID}&visual=PORTS";
  
  if ( $FORM{DEL} ) {
  $Equipment->graph_del( $FORM{DEL} );
  }
  
  if ( $FORM{SAVE} && $FORM{ID} && $FORM{NAME} ) {
  $Equipment->graph_change( { ID           => $FORM{ID},
                PARAM        => $FORM{NAME},
                COMMENTS     => $FORM{COMMENTS},
                MEASURE_TYPE => $FORM{TYPE},
               } );
  } 
  elsif ( !$FORM{ID} && $FORM{NAME} ) {
    $Equipment->graph_add({ NAS_ID       => $FORM{NAS_ID},
              PORT         => $FORM{PORT},
              COMMENTS     => $FORM{COMMENTS},
              PARAM        => $FORM{NAME},
              MEASURE_TYPE => $FORM{TYPE},
              });
  }
  my $params = $Equipment->graph_list( {
    COLS_NAME    => 1,
    ID       => $FORM{EDIT} ||  '_SHOW',
    NAS_ID       => $attr->{NAS_ID} || $FORM{NAS_ID},
    PORT         => $attr->{PORT} || $FORM{PORT} || '_SHOW',
    PARAM        => '_SHOW',
    MEASURE_TYPE => '_SHOW',
    COMMENTS     => '_SHOW',
    TOTAL        => 1
  } );
  
  if ( !$FORM{ADD} && !$FORM{EDIT}) {
    my $size = ($params)? @$params : 0;
    my $table = $html->table(
        {
            width       => '100%',
            caption    => "NAS ID: $FORM{NAS_ID}  $lang{PORT}: $FORM{PORT}",
            MENU    => "$lang{BACK}:index=$root_index:fees;$lang{ADD}:index=$index$pages_qs&ADD=1:add",
            title_plain => [ $lang{NAME}, $lang{TYPE}, $lang{COMMENTS} ],
            ID          => "STATS_EDIT",
            HAS_FUNCTION_FIELDS => 1
        }
      );
    foreach my $var (@$params) {
      $table->addrow( $var->{param}, $var->{measure_type},$var->{comments},
              $html->button('', "index=$index$pages_qs&EDIT=$var->{id}",
                    {
                    ICON  => 'glyphicon glyphicon-pencil text-info',
                    title => $lang{DEL},
                    }
                  ).
              $html->button('', "index=$index$pages_qs&TYPE=$var->{measure_type}&DEL=$var->{id}&TOTAL=$size",
                    {
                    ICON  => 'glyphicon glyphicon-trash text-danger',
                    title => $lang{DEL},
                    }
                  )
              );
    }
    print $table->show();
  } 
  else {
  my $FIELDS_SEL = $html->form_select(
    'TYPE',
      {
        SELECTED  => ( $FORM{EDIT} )?  $params->[0]->{measure_type}: $FORM{TYPE} ,
        SEL_ARRAY => ['COUNTER', 'GAUGE', 'DERIVE'],
      }
    );
  $html->message( 'warning', "NAS ID: $FORM{NAS_ID}  $lang{PORT}: $FORM{PORT} <span class='fa fa-cog fa-spin'> </span> " );
  
  print $html->form_main(
      {
          CONTENT =>  label_w_txt( $lang{NAME}, $html->form_input('NAME', ( $FORM{EDIT} )?  $params->[0]->{param}:'') ).
                label_w_txt( $lang{TYPE}, $FIELDS_SEL ).
                label_w_txt( $lang{COMMENTS}, $html->form_input('COMMENTS', ( $FORM{EDIT} )?  $params->[0]->{comments}:'') ).
                label_w_txt( $html->form_input( 'SAVE', ( $FORM{EDIT} )? $lang{CHANGE} : $lang{CREATE}, { TYPE => 'SUBMIT' } ) . "  ".
                             $html->button($lang{CANCEL}, "index=$index$pages_qs", {class =>"btn btn-default"}) ),
          METHOD  => 'GET',
          #class   => 'form-vertical',
          HIDDEN  => {
                  'index' => $index,
                  'ID'    => $FORM{EDIT},
                  'NAS_ID'=> $FORM{NAS_ID},
                  'PORT'  => $FORM{PORT}
                },
        } );
  }

  return 1;
}

#**********************************************************

=head2 equipment_snmp_stats()

=cut

#**********************************************************
sub equipment_snmp_stats {
  my ($attr) = @_;
  $Nms->{debug}=1;
 
  my %ind;
  my $stats = $Equipment->get_stats(
    {
    TABLE     => "equipment_counter64_stats",
    COLS_NAME => 1,
    NAS_ID    => '_SHOW',
        OBJ_ID    => $attr->{ID} || $FORM{ID},
        IN_ID     => $attr->{PORT} || $FORM{PORT} || '_SHOW',
        NAME      => '_SHOW',
    VALUE     => '_SHOW',
    DATETIME  => '_SHOW',
    TIME      => '_SHOW',
    SORT      => ($FORM{PORT})?'name':'',
    FROM_DATE => $FORM{FROM_DATE} || strftime("%Y-%m-%d %T", localtime(time-21600)),
    TO_DATE   => $FORM{TO_DATE} || strftime("%Y-%m-%d %T", localtime(time))
       }
  );
  return 1 if !$stats;
  foreach my $st ( 1..@$stats-1 ) {
    if ( $stats->[$st]->{id} == $stats->[$st-1]->{id} && $stats->[$st]->{in_id} == $stats->[$st-1]->{in_id}){
      my $period = $stats->[$st]->{time} - $stats->[$st-1]->{time};
      my $diff = $stats->[$st]->{value} - $stats->[$st-1]->{value};
      $ind{$stats->[$st]->{in_id}}{$stats->[$st]->{name}}{$stats->[$st]->{datetime}} = sprintf("%.2f", $diff / $period / 1048576 * 8);
    }
  }

  my $PERIODS_SEL = $html->form_daterangepicker({ NAME =>'FROM/TO', FORM_NAME => 'TIMERANGE', WITH_TIME => 1 });
  my $PORT_SEL = $html->form_select(
    'PORT',
    {
      SELECTED  => $FORM{PORT},
      SEL_ARRAY => \@{ [ sort { $a <=> $b } keys %ind ] },
      NO_ID     => 1
    }
  );

  print $html->form_main(
    {
      CONTENT => "$lang{PERIOD}: $lang{FROM} &nbsp" . $html->form_datetimepicker2('FROM_DATE') .
      "&nbsp $lang{TO} &nbsp" . $html->form_datetimepicker2('TO_DATE') .
      "&nbsp $lang{PORT}: " . $PORT_SEL . $html->form_input('SHOW', $lang{SHOW}, { TYPE => 'SUBMIT' }),
      METHOD  => 'GET',
      class   => 'form-inline',
      HIDDEN  => {
        index  => "$index",
        visual => 'STATS',
        NAS_ID => $attr->{NAS_ID} || $FORM{NAS_ID},
      },
    }
  );

  foreach my $in (sort { $a <=> $b } keys %ind) {
  my @data;
  foreach my $vr ( keys %{$ind{$in}}){
    foreach my $val ( sort keys %{$ind{$in}{$vr}}){
      push @data, ({ y => $val, $vr => $ind{$in}{$vr}{$val} });
    }
    }
    my @larr = sort keys %{$ind{$in}};
    print $html->make_charts3({DATA => \@data, XKEYS => \@larr, LABELS => \@larr, GRAPH_ID => $in, UNITS => 'Mb/s', HEADER => "$lang{PORT} $in" });
  }

  return 1;
}

#**********************************************************

=head2 nms_obj()

=cut

#**********************************************************
sub nms_obj {
  
  my ($attr) = @_;
  $pages_qs .= ($FORM{ID}) ? "&ID=$FORM{ID}" : q{};
  $LIST_PARAMS{SORT} = $FORM{sort} || 1;
  my $oid_hash = $Nms->sysobjectid_list({LABEL => '_SHOW', LIST2HASH  => 'objectid,label'});
  my $nms = $Nms->obj_list({
      IP           => '_SHOW',
      NAS_NAME     => '_SHOW',
      SYS_NAME     => '_SHOW',
      SYS_LOCATION => '_SHOW',
      SYS_OBJECTID => '_SHOW',
      NAS_ID       => '_SHOW',
      ID           => $FORM{ID} || '_SHOW',
      PAGE_ROWS    => 1000000,
      COLS_NAME    => 1,
      %LIST_PARAMS,
    });
  if (!$FORM{ID}){
    result_former({
      INPUT_DATA      => $Nms,
      LIST            => $nms,
      BASE_FIELDS     => 1,
      DEFAULT_FIELDS  => 'IP, NAS_NAME, SYS_NAME, SYS_LOCATION, SYS_OBJECTID',
      HIDDEN_FIELDS   => 'NAS_ID,ID',
#     FUNCTION_FIELDS => 'equipment_traps:change:trap_id;&pg='.($FORM{pg}||''),
      EXT_TITLES      => {
        ip       => 'IP',
        name     => "$lang{NAME} NAS",
      },
      FILTER_COLS  => {
        ip          => "search_link:nms_obj:,ID",
        name        => "search_link:equipment_info:,NAS_ID",
        sysobjectid => "search_link:sysobjectid_table:,SYSOBJECTID",
      },
      SELECT_VALUE    => { sysobjectid => \%$oid_hash },
      TABLE => {
        caption => " ",
        qs      => $pages_qs,
        ID      => 'OBJ_LIST',
      },
      MAKE_ROWS       => 1,
      SKIP_USER_TITLE => 1,
      SKIP_PAGES      => 1,
      TOTAL           => 1
    });
    print '<script>$(function () {
    var table = $("#OBJ_LIST_")
      .DataTable({
        "language": {
          paginate: {
              first:    "«",
              previous: "‹",
              next:     "›",
              last:     "»",
          },
          "zeroRecords":    "'.$lang{NOT_EXIST}.'",
          "lengthMenu":     "'.$lang{SHOW}.' _MENU_",
          "search":         "'.$lang{SEARCH}.':",
          "info":           "'.$lang{SHOWING}.' _START_ - _END_ '.$lang{OF}.' _TOTAL_ ",
          "infoEmpty":      "'.$lang{SHOWING}.' 0",
          "infoFiltered":   "('.$lang{TOTAL}.' _MAX_)",
      },
      "ordering": false,
      "lengthMenu": [[25, 50, -1], [25, 50, "'.$lang{ALL}.'"]]
      });
    });</script>';

 
  } 
  else {
    my @header_arr = ("$lang{MAIN}:index=$index&visual=INFO$pages_qs");
    my $heads = $Nms->oids_list({
      OBJECTID  => $nms->[0]->{sysobjectid},
      LABEL     => '_SHOW',
      SECTION   => '_SHOW',
      TYPE      => 'table',
      COLS_NAME => 1,
      GROUP     => 'section'
    });
    foreach my $val (@$heads){
      push @header_arr, "$val->{section}:index=$index&visual=$val->{section}$pages_qs";
    };
    if ( $Equipment->graph_list({ OBJ_ID => $FORM{ID} }) ) {
      push @header_arr, "STATS:index=$index&visual=STATS$pages_qs";
    }
    push @header_arr, "MIBs Browser:index=$index&visual=MIB_BR$pages_qs";
    
    my $buttons = $html->table_header( \@header_arr, { TABS => 1 } );
    if ($buttons) {
      my $obj_select = $html->form_select(
         'ID',
         {
           SELECTED => $attr->{ID} || $FORM{ID},
           SEL_LIST => $Nms->obj_list(
             {
               IP  => '_SHOW',
               SYS_LOCATION => '_SHOW',
               COLS_NAME => 1,
               SORT      => 1,
               PAGE_ROWS => 10000,
             }
           ),
           SEL_KEY        => 'id',
           SEL_VALUE      => 'ip,syslocation',
           NO_ID          => 1,
           MAIN_MENU      => get_function_index('nms_obj'),
           MAIN_MENU_ARGV => "ID=" . ($FORM{ID} || '')
         }
       );

      my $obj_select_form = $html->form_main(
         {
           CONTENT => $obj_select . $html->form_input('SHOW', $lang{SHOW}, { TYPE => 'submit' }),
           HIDDEN  => {
             'index'  => $index,
             'visual' => $FORM{visual} || 0,
           },
           NAME  => 'nms_obj_panel',
           ID    => 'nms_obj_panel',
           class => 'navbar-form navbar-right',
         }
      );

      print $html->element('div', $obj_select_form . $buttons, { class => 'navbar navbar-default' });
    }

    my $visual = $FORM{visual} || 'INFO';
    if ($visual eq 'INFO') {
      nms_obj_data({ ID => $FORM{ID}});
    } 
    elsif ($visual eq 'STATS') {
      nms_snmp_stats({ NAS_ID => $FORM{ID} });
    } 
    elsif ($visual eq 'MIB_BR') {
      mibs_browser({ ID => $FORM{ID} });
    } 
    else {
      oid_table({ ID => $FORM{ID}, SECT => $visual, OBJECTID  => $nms->[0]->{sysobjectid} });
    }
  }

  return 1;
}

#**********************************************************

=head2 nms_obj_data()

=cut

#**********************************************************
sub nms_obj_data {

  my ($attr) = @_;

  my $prm = load_mibs({ ID => $attr->{ID}});
  my $info = $Nms->oids_list(
    {
      COLS_NAME => 1,
      OBJECTID  => $prm->{sysobjectid},
      TYPE      => '_SHOW',
      LABEL     => '_SHOW',
      IID       => '_SHOW',
    }
  );
  my @vars;
  foreach my $b (@$info) {
    push @vars, [$b->{label},$b->{iid} || 0] if !$b->{type}
  }
  $snmpparms{UseSprintValue} = 1;
  $snmpparms{Community} = $attr->{COMMUNITY} || $conf{EQUIPMENT_SNMP_COMMUNITY_RO};
  my $sess = SNMP::Session->new(DestHost => $prm->{ip}, %snmpparms);

  my $vl = new SNMP::VarList(@vars);
  my @result = $sess->get($vl);
  if ( $sess->{ErrorNum} ) {
    return $html->message('err', $lang{ERROR}, $sess->{ErrorStr});
  }

  my $table = $html->table(
    {
      #caption     => "$lang{LAST_UPDATE}: $info->[0]->{info_time}",
      width       => '100%',
      title_plain => [ $lang{PARAMS}, $lang{VALUE} ],
      cols_align  => [ 'left', 'left' ],
      ID          => 'EQUIPMENT_INFO',
    }
  );

  my $edit = $html->button($lang{EDIT}, "index=$index&edit=1", { ICON => 'fa fa-pencil-square-o', });

  foreach my $val (@vars) {
  $edit = ($SNMP::MIB{$val->[0]}{'access'} && $SNMP::MIB{$val->[0]}{'access'} eq 'ReadWrite')?
    $html->button( $lang{CHANGE}, "index=$index$pages_qs&OID=$val->[0]",
          { MESSAGE => "$lang{CHANGE} $val->[0]",
            TEXT    => $lang{CHANGE},
            class   => 'change'
          }) :'';
  $table->addrow($html->b($val->[0]), $val->[2], $edit);
  }

  print $table->show();

  return 1;
}

#**********************************************************

=head2 oid_table()

=cut

#**********************************************************
sub oid_table {

  my ($attr) = @_;

  my $info = $Nms->obj_list({
    COLS_NAME    => 1,
    ID           => $FORM{ID}||$attr->{ID},
    IP           => '_SHOW',
    SYS_OBJECTID => '_SHOW',
    }
  );

  my $prm = load_mibs({ ID => $attr->{ID}});
  my $tbl = $Nms->oids_list(
    {
      COLS_NAME => 1,
      SECTION   => $FORM{SECT}||$attr->{SECT},
      OBJECTID  => $prm->{sysobjectid},
      TYPE      => 'table',
      LABEL     => '_SHOW',
    }
  );
 
  my @li;
  my @panel;

  foreach my $t (@$tbl) {
    my $rows = $Nms->oids_rows_list({ ID => $t->{id} });
    my @vars;
    foreach my $row (@$rows) {
      push @vars, $row->[1]
    }
  my $active = ( @panel < 1 )?'in active':'';
  push @li, $html->element('li', "<a data-toggle='tab' href='#" . $t->{label} . "'>" . $t->{label} . "</a>", { class => ( @li < 1 )?'active':'' });
  push @panel, $html->element('div', nms_snmp_table({
    SECT => $attr->{SECT},
    OID => $t->{label},
    columns => [ @vars ],
    IP => $info->[0]->{ip}
  }), { id => $t->{label}, class => "tab-pane fade" . (( @panel < 1 )?'in active':'') });  
  }

  my $edit = $html->button($lang{EDIT}, "index=$index&edit=1", { ICON => 'fa fa-pencil-square-o', });

  my $ul = $html->element('ul', "@li", { class => 'nav nav-tabs' });
  my $tab = $html->element('div', "@panel", { class => 'tab-content' });

  print $ul . $tab;

  return 1;
}

#**********************************************************
=head2 dropdown($attr); - return formated text with label
      
  Returns:
    String with element

=cut
#**********************************************************
sub dropdown {
  my ($name, $attr) = @_;
  my $IND = uc($attr->{IND});
  my @LI;
    foreach my $line ( @{$attr->{DMENU}} ) {
    my $link = qq(<a href='?index=$index&$IND=$line->{$attr->{IND}}'>$line->{$attr->{VAL}}</a>);
         push @LI, $html->li($link);
     }

  my $ul = $html->element('ul', "@LI", { class => 'dropdown-menu' });
  my $a = qq(<a class="dropdown-toggle" data-toggle="dropdown" href="#">$name <span class="caret"></span></a>);
  my $drop_li = $html->element('li', $a.$ul, { class => 'dropdown' });
  
  return $drop_li;

}

#**********************************************************

=head2 oid_table_edit()

=cut

#**********************************************************
sub oid_table_edit {

  my ($attr) = @_;

  if ( $FORM{del} ) {
    $Nms->oid_del($FORM{del});
  }
  my @mods;
  my $sys_mods = $Nms->modules_list({
    OBJECTID => $FORM{OBJECTID},
    MODULE => '_SHOW',
    STATUS => 1
  });
  foreach my $val (@$sys_mods) {
    push @mods, $val->[0];
  }
  SNMP::loadModules(@mods);
  if ($FORM{OID}){
    print nms_show({
      OID => $FORM{OID},
      BTN_NAME => $lang{ADD},
      BTN_EXT => qq/onclick=addLink()/
    });
    return 1;
  }
  if ( $FORM{add} && $FORM{add} eq '1') {
    my $tree = $html->element('div', mibs_tree({ONLY_TBL => 1}),
                    { 
                    class => 'col-md-3 text-right',
                    style => 'overflow-y: scroll;height:75vh;outline: 1px solid silver'
                  });

    my $res = $html->element('div','',
                  {
                    id => 'RESULT',
                    class => 'col-md-9 text-left',
                 });
  
    my $OBJECTID = $FORM{OBJECTID};
    my $OID = $FORM{OID} || '';
    my $scr = qq(<script>
            function addLink(oid,type){
              \$.get('index.cgi?qindex=$index&header=2&OBJECTID=$OBJECTID&add=' + oid + '&TYPE=' + type);
            };
            function renewLeftBox(itemName){
 
             var url = 'index.cgi?qindex=$index&header=2&add=1&OBJECTID=$OBJECTID&OID=' + itemName;
              \$('#RESULT').load(url);
            };
            \$('.tree-menu').find('.tree-item-table').on('click', function(){ renewLeftBox(this.innerText) })
            \$('.tree-menu').find('.tree-item-row').on('click', function(){ renewLeftBox(this.innerText) })
            \$('.tree-menu').find('.tree-item-item').on('click', function(){ renewLeftBox(this.innerText) })
          </script>); 
    print mibs_browser({EDIT => 1});
    return 1;
  }
  elsif ( $FORM{add} ) {
    my $sect = $SNMP::MIB{$FORM{add}}{parent}{label};
    $Nms->obj_oids_add({
      LABEL    => $FORM{add},
      SECTION  => $sect,
      TYPE     => $FORM{TYPE} || '',
      OBJECTID => $FORM{OBJECTID},
    });
 #   $html->redirect('index.cgi?&OBJECTID='. $FORM{OBJECTID} . '&index='. $index);
  }
  elsif ( $FORM{ID} ) {
    oid_table_row_edit({ OID_ID => $FORM{ID}, OBJECTID => $FORM{OBJECTID}, MODS => \@mods });
  } 
  else {
    $LIST_PARAMS{OBJECTID} = $FORM{OBJECTID};
    result_former({
      INPUT_DATA      => $Nms,
      FUNCTION        => 'oids_list',
      DEFAULT_FIELDS  => 'SECTION,LABEL,IID,TYPE,ACCESS',
      FUNCTION_FIELDS => 'oid_table_edit:change:id;type;label;objectid,del',
      HIDDEN_FIELDS   => 'ID,OBJECTID',
      EXT_TITLES      => {
        ip       => 'IP',
        name     => "$lang{NAME} NAS",
       },
      SKIP_USER_TITLE => 1,
      TABLE           => {
       qs   => "$pages_qs&OBJECTID=$FORM{OBJECTID}",
       ID   => 'OID_LIST',
       MENU => "$lang{ADD}:index=$index$pages_qs&OBJECTID=$FORM{OBJECTID}&add=1:add",
      },
      MAKE_ROWS => 1,
      TOTAL     => 1
    });
  }
  
  return 1;
}

#**********************************************************

=head2 oid_table_row_edit()

=cut

#**********************************************************
sub oid_table_row_edit {

  my ($attr) = @_;

  SNMP::loadModules($attr->{MODS});
  if ( $FORM{OID_DEL} ) {
    $Nms->oid_row_del({ 
      LABEL  => $FORM{OID_DEL},
      ID => $FORM{ID}
    });
  }
  if ( $FORM{ADD} ) {
    $Nms->oid_row_add({
      ID => $FORM{ID},
      LABEL  => $FORM{ADD},
    });
  } 

  my $oid = $Nms->oids_list({
    COLS_NAME  => 1,
    ID         => $FORM{ID},
    SECTION    => '_SHOW',
    OBJECTID   => $FORM{OBJECTID},
    LABEL      => '_SHOW',
    IID        => '_SHOW',
    TYPE       => '_SHOW',
    ACCESS     => '_SHOW'
  });
  $oid = $oid->[0];

  my $rows = $Nms->oids_rows_list({
    COLS_NAME  => 0,
    ID     => $attr->{OID_ID} || $FORM{ID},
    LABEL      => '_SHOW',
    OBJECTID   => '_SHOW',
    LIST2HASH  => 'label, objectid'
  });

  my @colls;
  my @show;
  foreach my $coll (@{$SNMP::MIB{$oid->{label}}{children}[0]{children}}) {
    my $state = ( exists $rows->{$coll->{label}} ) ? 1 : undef ;
    push @colls, label_w_txt( $coll->{label}, $html->form_input($coll->{label}, $state, { TYPE => 'checkbox', STATE => $state }), {CTRL => 1} );
  }
  
	print $html->form_main(
  {
    CONTENT => "<h3>$oid->{label}</h3>" . "@colls",
    METHOD  => 'GET',
    ID      => 'ROWS_EDIT',
    HIDDEN  => {
      'index' => $index,
    },
  } );
  
  my $ID = $FORM{ID};
  my $scr = qq(
         <script>
         \$(":checkbox").change(function(){
             if(\$(this).prop("checked"))
             {
               var url = 'index.cgi?qindex=$index&header=2&TYPE=table&ID=' + $ID + '&ADD=' + \$(this).prop('id');
               \$('#ROWS_EDIT').load(url);
               loadDataToModal("Save",true,true);
             }
             else
             {
               var url = 'index.cgi?qindex=$index&header=2&TYPE=table&ID=' + $ID + '&OID_DEL=' + \$(this).prop('id');
               \$('#ROWS_EDIT').load(url);
               loadDataToModal("Save",true,true);
             }
         });
         window.setTimeout(function(){
           \$('#PopupModal').modal('hide')
         }, 1000);        
         </script>
         );
  print $scr;

  return 1;
}

#**********************************************************

=head2 nms_snmp_get()

=cut

#**********************************************************
sub nms_snmp_get {

  my ($attr) = @_;
  $snmpparms{UseSprintValue} = 1;
  $snmpparms{Community} = $attr->{COMMUNITY} || $conf{EQUIPMENT_SNMP_COMMUNITY_RO};
  my $ip = $FORM{IP} || $attr->{IP};
  my $oid = $FORM{OID} || $attr->{OID};
  my $iid = $FORM{IID} || $attr->{IID} || 0;
  my $sess = SNMP::Session->new(DestHost => $ip, %snmpparms);
  my $result = $sess->get([ $oid, $iid ]);
  if ( $sess->{ErrorNum} ) {
    return $html->message('err', $lang{ERROR}, $sess->{ErrorStr});
  }
  my $result_tbl = $html->table({});
  my $set_button = '';
  if ( $SNMP::MIB{$oid}{access} && $SNMP::MIB{$oid}{access} eq 'ReadWrite'){
    $set_button = $html->element( 'span', undef,
                    {
                      ex_params  => qq/onclick=renewLeftBox($oid,'SET',$iid)/,
                      class  => 'glyphicon glyphicon-pencil text-info',
                    }
                  );
  }
  
  $result_tbl->addrow($html->b($lang{RESULT}), $result, $set_button);
 
  return $result_tbl->show();
}

#**********************************************************

=head2 nms_snmp_walk()

=cut

#**********************************************************
sub nms_snmp_walk {

  my ($attr) = @_;
#  $snmpparms{Timeout} = 10000000;
  $snmpparms{Community} = $attr->{COMMUNITY} || $conf{EQUIPMENT_SNMP_COMMUNITY_RO};
  my $sess = SNMP::Session->new(DestHost => $FORM{IP} || $attr->{IP}, %snmpparms);
  my $oid = $FORM{OID} || $attr->{OID};
  my @result = $sess->bulkwalk(0, 1,[ $oid ]);
  if ( $sess->{ErrorNum} ) {
    return $html->message('err', $lang{ERROR}, $sess->{ErrorStr});
  }
  my $result_tbl = $html->table({});
  foreach my $val (@{$result[0]}) {
    my $edit = $html->button( $lang{CHANGE}, "index=$index$pages_qs&OID=$oid",
         { MESSAGE => "$lang{CHANGE} $SNMP::MIB{$oid}{label}",
           TEXT    => $lang{CHANGE},
           class   => 'change'
         });
    $result_tbl->addrow(@$val, ($SNMP::MIB{$oid}{access} eq 'ReadWrite')? $edit :'')
  }
 
  return $result_tbl->show();
}

#**********************************************************

=head2 nms_snmp_set()

=cut

#**********************************************************
sub nms_snmp_set {

  my ($attr) = @_;
  $snmpparms{UseSprintValue} = 1;
  $snmpparms{Community} = $attr->{COMMUNITY} || $conf{EQUIPMENT_SNMP_COMMUNITY_RW};
  my $sess = SNMP::Session->new(DestHost => $FORM{IP} || $attr->{IP}, %snmpparms);
  my $result = $sess->set([ $FORM{OID} || $attr->{OID}, $FORM{IID} || $attr->{IID} || 0 ]);
  if ( $sess->{ErrorNum} ) {
    return $html->message('err', $lang{ERROR}, $sess->{ErrorStr});
  }
  my $result_tbl = $html->table({});
  $result_tbl->addrow($html->b($lang{RESULT}), $result);
  #print $result_tbl->show();
  print $attr->{OID};
 
  return 1;
}

#**********************************************************

=head2 nms_snmp_table()

=cut

#**********************************************************
sub nms_snmp_table {

  my ($attr) = @_;
  $snmpparms{UseSprintValue} = 1;
#  $snmpparms{Timeout} = 10000000;
  $snmpparms{Community} = $attr->{COMMUNITY} || $conf{EQUIPMENT_SNMP_COMMUNITY_RO};
  my $sess = SNMP::Session->new(DestHost => $attr->{IP},%snmpparms);

  if (!$attr->{columns}){
      foreach my $c (sort { $b <=> $a } @{$SNMP::MIB{$attr->{OID}}{children}[0]{children}}) {
      push @{$attr->{columns}}, $c->{'label'};
      }
  }

  my $results = $sess->gettable( $attr->{OID}, columns => [@{$attr->{columns}}] );

  if ( $sess->{ErrorNum} ) {
    return $html->message('err', $lang{ERROR}, $sess->{ErrorStr});
  }
 
  my $table = $html->table({ title_plain => [ @{$attr->{columns}} ], });

  foreach my $var (sort { ($a =~ /^\d+$/ &&  $b =~ /^\d+$/) ? $a <=> $b : $a cmp $b } keys %$results) {
    my @row = ();
    foreach my $ind ( @{$attr->{columns}}){
      if ( ($SNMP::MIB{$ind}{syntax} eq 'PortList') && $results->{$var}->{$ind} ){
        $results->{$var}->{$ind} =~ s/"|\n//g;
        my @in_hex = split(/ /, $results->{$var}->{$ind});
        my $index='';
        foreach my $hex (@in_hex){
          $index .= sprintf( "%08b", hex($hex));
        }
        $results->{$var}->{$ind} = '';
        my $offset = 0;
        my $result = index($index, 1, $offset);
        while ($result != - 1) {
          $result = index($index, 1, $offset);
          $offset = $result + 1;
          $results->{$var}->{$ind} .= "$offset " if ( $offset > 0 );
        }
      }
      if ( $SNMP::MIB{$ind}{syntax} eq 'MacAddress' && $SNMP::MIB{$ind}{syntax} ne ''){
        $results->{$var}->{$ind} = join(':', unpack("H2H2H2H2H2H2", $results->{$var}->{$ind}));
      }
      push @row,  $results->{$var}->{$ind};
    }
    if ( $row[1]) {
      $table->addrow(@row);
    }
  }

  return $table->show();
}

#**********************************************************

=head2 nms_show()

=cut

#**********************************************************
sub nms_show {
  my ($attr) = @_;
  $snmpparms{UseSprintValue} = 1;
  my $table = $html->table();
  $table->addrow($html->b($lang{NAME}), $SNMP::MIB{$attr->{OID}}{label});
  $table->addrow($html->b('objectID'), $SNMP::MIB{$attr->{OID}}{objectID});
  $table->addrow($html->b($lang{TYPE}), $SNMP::MIB{$attr->{OID}}{type}) if $SNMP::MIB{$attr->{OID}}{type};
  $table->addrow($html->b('Module'), $SNMP::MIB{$attr->{OID}}{moduleID});
  $table->addrow($html->b($lang{ACCESS}), $SNMP::MIB{$attr->{OID}}{access});
  $table->addrow($html->b('Syntax'), $SNMP::MIB{$attr->{OID}}{syntax}) if $SNMP::MIB{$attr->{OID}}{syntax};
  $table->addrow($html->b($lang{RANGE}), "$SNMP::MIB{$attr->{OID}}{ranges}[0]{low} .. $SNMP::MIB{$attr->{OID}}{ranges}[0]{high}") 
      if $SNMP::MIB{$attr->{OID}}{ranges}[0];
  $table->addrow($html->b($lang{DESCRIBE}), $SNMP::MIB{$attr->{OID}}{TCDescription}) if $SNMP::MIB{$attr->{OID}}{TCDescription};
  $table->addrow($html->b('Reference'), $SNMP::MIB{$attr->{OID}}{reference}) if $SNMP::MIB{$attr->{OID}}{reference};
  $table->addrow($html->b('Index(es)'), "@{$SNMP::MIB{$attr->{OID}}{indexes}}") if $SNMP::MIB{$attr->{OID}}{indexes}[0];
  $table->addrow($html->b('Value List'), oid_enums($attr->{OID},{STR=>1})) if keys %{$SNMP::MIB{$attr->{OID}}{enums}};
  if ($attr->{EDIT}){
    my $type = ($SNMP::MIB{$attr->{OID}}{children}[0]{indexes}[0])? 'table' : '';
    my $button = $html->button( $lang{ADD}, undef, {
      JAVASCRIPT     => '',
      SKIP_HREF      => 1,
      NO_LINK_FORMER => 1,
      class          => "btn btn-default",
      # ICON           => 'glyphicon glyphicon-download',
      title          => $lang{ADD},
      ex_params      => qq/onclick=addLink('$attr->{OID}','$type') /
    });
    $table->addrow($button, '');
  }
   
  return $table->show();
}
#**********************************************************

=head2 mibs_browser()

=cut

#**********************************************************
sub mibs_browser {

  my ($attr) = @_;
 # $Nms->{debug}=1;
  $pages_qs = ($attr->{ID}) ? "&ID=$attr->{ID}" : q{};
  my $root_index = get_function_index('mibs_browser');
  my $oids_index = get_function_index('oid_table_edit');
  my $mods_index = get_function_index('modules_table');
  my $ID = 1;
  my @mods;

  my $nms = $Nms->obj_list({ 
    COLS_NAME => 1,
    IP => '_SHOW',
    ID => $attr->{ID} || $FORM{ID} || $FORM{GET} || $FORM{WALK} || $FORM{TABLE} || $FORM{SHOW},
    SYS_OBJECTID => '_SHOW'
  });
  
  my $OBJECTID = $FORM{OBJECTID} || $nms->[0]->{sysobjectid};

    $ID = $nms->[0]->{id};
    my $sys_mods = $Nms->modules_list({
      OBJECTID => $OBJECTID,
      MODULE => '_SHOW',
      STATUS => 1
    });
    foreach my $val (@$sys_mods) {
      push @mods, $val->[0];
    }
    SNMP::loadModules(@mods);
    my @sys = split('\.', $nms->[0]->{sysobjectid});
    my $vendor = $Nms->vendors_list({ COLS_NAME => 1, ID => $sys[7], NAME => '_SHOW' });

  if ($FORM{OID}){
    print nms_show({ OID => $FORM{OID}, EDIT => 1 });
    if ($FORM{GET}){
      print nms_snmp_get({ IP => $nms->[0]->{ip}, OID => $FORM{OID}});
    } 
    elsif ($FORM{WALK}){
      print nms_snmp_walk({ IP => $nms->[0]->{ip}, OID => $FORM{OID}});
    } 
    elsif ($FORM{TABLE}){
      print nms_snmp_table({ IP => $nms->[0]->{ip}, OID => $FORM{OID}});
    } 
    elsif ($FORM{SET}){
      nms_snmp_set({ IP => $nms->[0]->{ip}, OID => $FORM{OID}});
    }
    return 1;
  }

  my $res = $html->element('div', '',
                { 
                id => 'RESULT',
                class => 'col-md-9 text-left',
                style => 'overflow-y:scroll;overflow-x:scroll;height:75vh;outline: 1px solid silver'
              });

  my $mod_btn = $html->button($lang{MODULES}, "index=$mods_index&OBJECTID=$OBJECTID", {class =>"btn btn-primary btn-sm"});
  my $search = $html->element('input', '', { 
    class => 'search-input form-control input-sm',
    placeholder => 'press Enter for search'
  });
  my $funct_div = $html->element('div', $search ."   ". $mod_btn, { class => 'form-inline' } );
  my $tree = $html->element('div', $funct_div . mibs_tree(),
                  { 
                  class => 'col-md-3',
                  style => 'overflow-y: scroll;height:75vh;outline: 1px solid silver'
                });
  my $scr = qq(
   <script>
    var id = '$ID';

    function addLink(oid,type){
      \$.get('index.cgi?qindex=$oids_index&header=2&OBJECTID=$OBJECTID&add=' + oid + '&TYPE=' + type);
    };

    function renewLeftBox(itemName,Action,id,iid){
    iid = iid ? iid : 0 ;
    var url = 'index.cgi?qindex=$root_index&OBJECTID=$OBJECTID&header=2&OID=' + itemName + '&IID=' + iid + '&' + Action + '=' + id;
      \$('#RESULT').load(url);
    };
    \$('#MY_TREE').on("changed.jstree", function (e, data) {
        renewLeftBox(data.instance.get_node(data.selected[0]).text,'SHOW', id)
    });
    \$(".search-input").keypress(function(e) {
      if (e.which == 13) {
        var searchString = \$(this).val();
        console.log(searchString);
        \$('#MY_TREE').jstree('search', searchString);
      }
    });
  </script>); 

  print $tree.$res.$scr;
  return 1;
}

#**********************************************************

=head2 nms_snmp_stats()

=cut

#**********************************************************
sub nms_snmp_stats {
  
  my ($attr) = @_;
  use Time::Local;
  load_pmodule2('Redis');

  my $redis = Redis->new(
          server => $conf{REDIS_SERV},
          encoding => undef,
  );

  my $stats = $Equipment->graph_list(
    {
    COLS_NAME => 1,
        OBJ_ID    => $attr->{ID} || $FORM{ID},
        PORT      => $attr->{PORT} || $FORM{PORT} || '_SHOW',
        PARAM     => '_SHOW',
    TYPE      => '_SHOW',
    NAME      => '_SHOW',
       }
  );
  return 1 if !$stats;

  my $to_date = time;
  my $from_date = time-21600;
  if ($FORM{TO_DATE}){
    my ($year,$mon,$mday,$hour,$min) = split(/[\s\-:]+/, $FORM{TO_DATE});
    $to_date = timelocal(0,$min,$hour,$mday,$mon-1,$year);
  }
  if ($FORM{TO_DATE}){
    my ($year,$mon,$mday,$hour,$min) = split(/[\s\-:]+/, $FORM{FROM_DATE});
    $from_date = timelocal(0,$min,$hour,$mday,$mon-1,$year);
  }
  
  my %ind;
  my %params;
  foreach my $key ( @$stats ) {
    my @list = $redis->zrangebyscore("$key->{obj_id}:$key->{port}:$key->{param}", $from_date, $to_date, 'WITHSCORES' );
    foreach my $val ( 0..@list-2 ) {
      if ( $val%2 == 1 ){
        my $value = sprintf("%.2f", ($list[$val+1] - $list[$val-1]) / ($list[$val+2] - $list[$val]) / 1048576 * 8);
        push  @{$ind{$key->{port}}}, ({ $key->{name} => $value, y => strftime("%Y-%m-%d %T", localtime($list[$val])) });
      }
    }
    push  @{$params{$key->{port}}}, $key->{name};
  };

  my $PORT_SEL = $html->form_select(
    'PORT',
    {
      SELECTED  => $FORM{PORT},
      SEL_ARRAY => \@{ [ sort { $a <=> $b } keys %ind ] },
      NO_ID     => 1
    }
  );

  print $html->form_main(
    {
      CONTENT => "$lang{PERIOD}: $lang{FROM} &nbsp" . $html->form_datetimepicker2('FROM_DATE') .
    "&nbsp $lang{TO} &nbsp" . $html->form_datetimepicker2('TO_DATE') .
    "&nbsp $lang{PORT}: " . $PORT_SEL . $html->form_input('SHOW', $lang{SHOW}, { TYPE => 'SUBMIT' }),
      METHOD  => 'GET',
      class   => 'form-inline',
      HIDDEN  => {
        index  => "$index",
        visual => 'STATS',
        ID => $attr->{ID} || $FORM{ID},
      },
    }
  );

  foreach my $in (sort { $a <=> $b } keys %ind) {
    print $html->make_charts3({DATA => \@{$ind{$in}}, XKEYS => \@{$params{$in}}, LABELS => \@{$params{$in}}, GRAPH_ID => $in, UNITS => 'Mb/s', HEADER => "$lang{PORT} $in" });
  }

  return 1;
}

#**********************************************************
=head2 label_w_txt($label,$text,$attr); - return formated text with label

  Arguments:
    $label - text of label
    $text 
    $attr -
      CTRL - for form with input control
      COLOR - color of label
      LCOL
      RCOL
      
  Returns:
    String with element

=cut
#**********************************************************
sub label_w_txt {
	my ($label,$text,$attr) = @_;
	my $class ='';
	$class .= 'control-label' if (!$attr->{CTRL}) ;
	$class .= "label-$attr->{COLOR}" if ($attr->{COLOR}) ;
	
	return "<div class='form-group'><label class='$class col-sm-" . ($attr->{LCOL}||'2') . "'>".
				($label||'') . "</label><div class='col-sm-" . ($attr->{RCOL}||'2') . "'>" . ($text || '') . "</div></div>";
}
#**********************************************************

=head2 sysobjectid_table()

=cut

#**********************************************************
sub sysobjectid_table {

  my ($attr) = @_;

    $LIST_PARAMS{OBJECTID} = $FORM{SYSOBJECTID};
#    $LIST_PARAMS{GROUP} = 'module';
    result_former({
      INPUT_DATA      => $Nms,
      FUNCTION        => 'sysobjectid_list',
    #  DEFAULT_FIELDS  => 'SYSORID, MODULE, STATUS',
      DEFAULT_FIELDS  => 'LABEL, OBJECTID',
      FUNCTION_FIELDS => 'modules_table:modules:objectid,oid_table_edit:oids:objectid',
      SKIP_USER_TITLE => 1,
      FILTER_COLS  => {
#        ip   => "search_link:nms_obj:,ID",
      },
#     SELECT_VALUE    => { sysObjectID => \%ohash },
      TABLE => {
        caption => " ",
        qs      => ($FORM{SYSOBJECTID})? "$pages_qs&SYSOBJECTID=$FORM{SYSOBJECTID}" : $pages_qs,
        ID      => 'SYSOBJECTID_LIST',
      },
      MAKE_ROWS => 1,
      TOTAL     => 1
    });

  return 1;
}
#**********************************************************

=head2 modules_table()

=cut

#**********************************************************
sub modules_table {
  my ($attr) = @_;

  $LIST_PARAMS{OBJECTID} = $FORM{OBJECTID};
  $pages_qs = "$pages_qs&OBJECTID=$FORM{OBJECTID}";
  if ($FORM{del}){
    $Nms->module_del($FORM{del});
  }
  if ($FORM{SAVE}){
    $Nms->module_add({
      ID        => $FORM{ID}||'',
      MODULE    => $FORM{NAME},
      OBJECTID  => $FORM{OBJECTID},
      DESCR     => $FORM{DESCR},
      STATUS    => $FORM{STATUS} || 0
    } );
  }
  my $modules = $Nms->modules_list({ 
    ID        => $FORM{chg},
    MODULE    => '_SHOW',
    DESCR     => '_SHOW',
    STATUS    => '_SHOW',
    COLS_NAME => 1,
    %LIST_PARAMS,
  });
  if ($FORM{chg} || $FORM{add}){
    SNMP::addMibFiles(glob("../../var/snmp/mibs/private" . '/*'));
    my %mod;
    foreach my $oid (keys(%SNMP::MIB)) {
       $mod{$SNMP::MIB{$oid}{moduleID}} = '' if $SNMP::MIB{$oid}{moduleID}
    }
    my @mods = sort keys %mod;
  	my $NAME_SEL = $html->form_select(
      'NAME',
      	{
        		SELECTED  => $modules->[0]->{module}|| '',
        		SEL_ARRAY  => \@mods,
      	}
      );
    print $html->form_main({
          	CONTENT =>  label_w_txt($lang{DESCRIBE}, $modules->[0]->{descr}).
                        label_w_txt($lang{NAME}, $NAME_SEL).
                        label_w_txt($lang{STATUS}, $html->form_input('STATUS', 1, {
                            TYPE => 'checkbox',
                            STATE => $modules->[0]->{status}||undef
                          })
                          ).
                        label_w_txt(undef, $html->form_input( 'SAVE', ( $FORM{chg} )? $lang{CHANGE} : $lang{CREATE}, {
                            TYPE => 'SUBMIT'
                          }) . "	" .
      											$html->button($lang{CANCEL}, "index=$index$pages_qs", {class =>"btn btn-default"}),
      								  {RCOL => 3}),
      	    METHOD  => 'GET',
          	HIDDEN  => {
            				'index'    => $index,
            				'ID'       => $FORM{chg} || '',
                    'OBJECTID' => $FORM{OBJECTID},
                    'DESCR'    => $modules->[0]->{descr}
          				},
        	});
  }
  else{
    result_former({
      INPUT_DATA      => $Nms,
      LIST            => $modules,
      DEFAULT_FIELDS  => 'MODULE, DESCR, STATUS',
      HIDDEN_FIELDS   => 'OBJECTID',
      FUNCTION_FIELDS => 'change, del',
      SKIP_USER_TITLE => 1,
      STATUS_VALS     => [$lang{DISABLED}, $html->color_mark($lang{ACTIV}, 'text-success')],
      TABLE => {
        caption => "SNMP Modules",
        qs      => $pages_qs,
        ID      => 'MODULES_LIST',
        MENU    => "$lang{ADD}:index=$index$pages_qs&add=1:add",
      },
      MAKE_ROWS => 1,
      TOTAL     => 1
    });
  }

  return 1;
}

#**********************************************************
=head2 load_mibs($attr); - return formated text with label

=cut
#**********************************************************
sub load_mibs {
  my ($attr) = @_;
  
  my $nms = $Nms->obj_list({
    COLS_NAME    => 1,
    ID           => $attr->{ID},
    IP           => '_SHOW',
    SYS_OBJECTID => '_SHOW',
    }
  );
  my @mods;
  my $sys_mods = $Nms->modules_list({
    OBJECTID => $nms->[0]->{sysobjectid},
    MODULE   => '_SHOW',
    STATUS   => 1
  });
  foreach my $val (@$sys_mods) {
    push @mods, $val->[0];
  }
  SNMP::loadModules(@mods);
  
  return $nms->[0];

}

#**********************************************************

=head2 oid_enums()

=cut

#**********************************************************
sub oid_enums {
  my ($oid, $attr) = @_;
  my %enums;
  my $str = '';
  foreach my $el ( keys %{$SNMP::MIB{$oid}{enums}} ) {
    $enums{$SNMP::MIB{$oid}{enums}{$el}} = $el;
  }
  if ($attr){
    foreach my $key ( sort keys %enums ) {
      $str .= "$key = $enums{$key} </br>"
    }
    return $str;
  };

  return %enums;
}

#**********************************************************

=head2 mibs_tree2()

=cut

#**********************************************************
sub mibs_tree {

  my ($attr) = @_;

 # SNMP::loadModules(@{$attr->{MODULES}});
  my %labels;
  my @tree_arr=[];
  foreach my $oid (sort keys(%SNMP::MIB)) {
    if ( $attr->{LABEL} ) {
      $labels{$SNMP::MIB{$oid}{label}} = $SNMP::MIB{$oid}{objectID} if  $SNMP::MIB{$oid}{label} =~ /$attr->{LABEL}/
    }
    my $prev_id = ($SNMP::MIB{$oid}{parent})? $SNMP::MIB{$oid}{parent}{objectID} : '#' ;
    my $icon = '';
    my %type = ();
    if ( $SNMP::MIB{$oid}{children}[0]{indexes}[0] ){
      $type{type} = 'table';
    } 
    elsif ( $SNMP::MIB{$oid}{parent} && $SNMP::MIB{$oid}{parent}{indexes}[0]){
      $type{type} = 'row';
    } 
    elsif ( $SNMP::MIB{$oid}{type}){
      $type{type} = 'scalar';
    }
    push @tree_arr, ({
      id   => $SNMP::MIB{$oid}{objectID},
      text => $SNMP::MIB{$oid}{label},
      parent => $prev_id,
      %type
    });
  }
  return \%labels if $attr->{LABEL};
  return make_tree( @tree_arr );
}

#**********************************************************
=head2 make_tree($attr) - Make different charts

   If given only one series and X_TEXT as YYYY-MM, will build columned compare chart

   Arguments:
     $attr
       DATA    - Data array of hashes
   Result:
     TRUE or FALSE

=cut
#**********************************************************
sub make_tree {
  my $self = shift;
  my (@data) = @_;
  my $result = '';

  my $TREE_ID = 'MY_TREE';
  my $DATA  = JSON->new->encode(\@data);
  
  $result.= qq{
    <link rel='stylesheet' href='/styles/lte_adm/plugins/jstree/themes/proton/style.min.css' />
    <script type='text/javascript' src='/styles/lte_adm/plugins/jstree/jstree.min.js'></script>
    <div id=$TREE_ID></div>
  };
  $result.= qq(
    <script>
      \$('#$TREE_ID').jstree({
    		'core' : {
          'themes': {
            'name': 'proton',
            'responsive': true
          },
          'data' : $DATA
        },
        'plugins' : [ 'contextmenu', 'types', 'search' ],
        'search': {
          'case_insensitive': true,
          'show_only_matches' : false
        },
        'contextmenu' : {
          'items' : customMenu
        },
        'types' : {
          'table' : {
                'icon' : 'glyphicon glyphicon-list-alt'
              },
          'row' : {
                'icon' : 'glyphicon glyphicon-option-horizontal'
              },
          'scalar' : {
                'icon' : 'glyphicon glyphicon-file'
              }
        }
    	});
      function customMenu(node) {
          var items = {
              Get: {
                  label: 'Get',
                  icon : 'glyphicon glyphicon-download',
                  action: function () {
                    renewLeftBox(node.text,'GET',id);
                  }
              },
              Table: { 
                  label: 'Table',
                  icon : 'glyphicon glyphicon-list-alt',
                  action: function () {
                    renewLeftBox(node.text,'TABLE',id);
                  }
              },
              Walk: { 
                  label: 'Walk',
                  icon : 'glyphicon glyphicon-circle-arrow-down',
                  action: function () {
                    renewLeftBox(node.text,'WALK',id);
                  }
              }
          };

          if (node.type === 'scalar') {
            delete items.Table;
            delete items.Walk;            
          }
          else if (node.type === 'row') {
            delete items.Get;
            delete items.Table;
          }
          else if (node.type === 'table') {
            delete items.Get;
          }
          else {
            delete items.Table;
            delete items.Walk;
            delete items.Get;
          }

          return items;
      }
	  </script>
   );

  return $result;
}

1;